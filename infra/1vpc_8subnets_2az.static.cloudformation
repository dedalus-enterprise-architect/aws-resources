AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to provision a VPC with 2 public subnets and 6 private subnets.'

Parameters:
  VpcName:
    Type: String
    Description: Name of the VPC
  VpcCidr:
    Type: String
    Default: 172.20.0.0/16
    Description: CIDR block for the VPC
  CreateInternetGateway:
    Type: String
    AllowedValues: [true, false]
    Default: true
    Description: Whether to create an Internet Gateway
  CreateNatGateway:
    Type: String
    AllowedValues: [true, false]
    Default: true
    Description: Whether to create a NAT Gateway

  # Public Subnet CIDR parameters
  PublicSubnet1Cidr:
    Type: String
    Default: 172.20.0.0/24
    Description: CIDR block for Public Subnet 1 in AZ-A
  PublicSubnet2Cidr:
    Type: String
    Default: 172.20.1.0/24
    Description: CIDR block for Public Subnet 2 in AZ-B

  # Private Subnet CIDR parameters (3 per AZ)
  PrivateSubnet1Cidr:
    Type: String
    Default: 172.20.2.0/24
    Description: CIDR block for Private Subnet 1 in AZ-A
  PrivateSubnet2Cidr:
    Type: String
    Default: 172.20.3.0/24
    Description: CIDR block for Private Subnet 2 in AZ-A
  PrivateSubnet3Cidr:
    Type: String
    Default: 172.20.4.0/24
    Description: CIDR block for Private Subnet 3 in AZ-A
  PrivateSubnet4Cidr:
    Type: String
    Default: 172.20.5.0/24
    Description: CIDR block for Private Subnet 4 in AZ-B
  PrivateSubnet5Cidr:
    Type: String
    Default: 172.20.6.0/24
    Description: CIDR block for Private Subnet 5 in AZ-B
  PrivateSubnet6Cidr:
    Type: String
    Default: 172.20.7.0/24
    Description: CIDR block for Private Subnet 6 in AZ-B

Conditions:
  CreateInternetGateway: !Equals [ !Ref CreateInternetGateway, "true" ]
  CreateNatGateway: !Equals [ !Ref CreateNatGateway, "true" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Ref VpcName

  # Public Subnets (1 in AZ-A, 1 in AZ-B)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-fe-public-1a"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-fe-public-1b"

  # Private Subnets (3 in AZ-A, 3 in AZ-B)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-fe-private-1a"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-fe-private-1a"
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-application-private-1a"
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet4Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-application-private-1b"
  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet5Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-data-private-1b"
  PrivateSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet6Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-data-private-1b"

  # Internet Gateway (optional)
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateInternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateInternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Elastic IP (needed for NAT Gateway if enabled)
  EIP:
    Type: AWS::EC2::EIP
    Condition: CreateNatGateway
    Properties:
      Domain: vpc

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-natgw"

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-public-rt"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-private-rt"

  # Routes for Public Subnets
  PublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Routes for Private Subnets (via NAT Gateway)
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Route Table Associations (for Public Subnets)
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Route Table Associations (for Private Subnets)
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet5
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet6
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
  PrivateSubnet3Id:
    Description: Private Subnet 3 ID
    Value: !Ref PrivateSubnet3
  PrivateSubnet4Id:
    Description: Private Subnet 4 ID
    Value: !Ref PrivateSubnet4
  PrivateSubnet5Id:
    Description: Private Subnet 5 ID
    Value: !Ref PrivateSubnet5
  PrivateSubnet6Id:
    Description: Private Subnet 6 ID
    Value: !Ref PrivateSubnet6
